@page "/discbag"
@inject DiscService discService

<h3>Disc Bag</h3>

@if (discsInBag.Count == 0)
{
    <p>No discs in the bag. Add discs to get started!</p>
    <div>
        <input @bind="newDiscName" placeholder="Enter existing disc name" />
        <button @onclick="AddExistingDiscToBag">Add Existing Disc to Bag</button>
        @if (!showAllDiscs)
        {
            <button @onclick="DisplayAllDiscs">Show all discs</button>
        }
        @if (showAllDiscs)
        {
            <button @onclick="HideAllDiscs">Hide Discs</button>
            <ul>
                @foreach (var disc in allDiscs)
                {
                    <li>
                        <p>Manufacturer: @disc.Manufacturer</p>
                        <p>Name: @disc.Name</p>
                    </li>
                }
            </ul>
        }
    </div>
}

<h4>Discs in Bag:</h4>

@if (discsInBag.Count > 0)
{
    <ul>
        @foreach (var disc in discsInBag)
        {
            <li>
                <button @onclick="() => DisplayDiscInfo(disc.Name)">@disc.Name</button>
                <button @onclick="() => RemoveDiscFromBag(disc.Name)">Remove</button>
            </li>
        }
    </ul>

    <div>
        <input @bind="newDiscName" placeholder="Enter existing disc name" />
        <button @onclick="AddExistingDiscToBag">Add Existing Disc to Bag</button>
    </div>

    <div>
        @if (selectedDisc != null && isDiscClicked)
        {
            <div>
                <h4>Selected Disc Information</h4>
                <h5>@selectedDisc.Name</h5>
                <p>Speed: @selectedDisc.Speed</p>
                <p>Glide: @selectedDisc.Glide</p>
                <p>Turn: @selectedDisc.Turn</p>
                <p>Fade: @selectedDisc.Fade</p>
                <p>Diameter: @selectedDisc.Diameter</p>
                <p>Height: @selectedDisc.Height</p>
                <p>RimDepth: @selectedDisc.RimDepth</p>
                <p>RimWidth: @selectedDisc.RimWidth</p>
                <button @onclick="HideSelectedDisc">Hide Disc</button>
            </div>
        }
    </div>

    <div>
        <button @onclick="ShowCreateNewDiscForm">Create New Disc</button>
    </div>

    <!-- Display the form when the button is clicked -->
    @if (showCreateNewDiscForm)
    {
        <div>
            <h4>Create New Disc</h4>
            <div>
                <label for="manufacturer">Manufacturer:</label>
                <input @bind="newDisc.Manufacturer" />
            </div>
            <div>
                <label for="name">Name:</label>
                <input @bind="newDisc.Name" />
            </div>
            <div>
                <label for="speed">Speed:</label>
                <input @bind="newDisc.Speed" />
            </div>
            <div>
                <label for="glide">Glide:</label>
                <input @bind="newDisc.Glide" />
            </div>
            <div>
                <label for="turn">Turn:</label>
                <input @bind="newDisc.Turn" />
            </div>
            <div>
                <label for="fade">Fade:</label>
                <input @bind="newDisc.Fade" />
            </div>
            <div>
                <label for="diameter">Diameter:</label>
                <input @bind="newDisc.Diameter" />
            </div>
            <div>
                <label for="height">Height:</label>
                <input @bind="newDisc.Height" />
            </div>
            <div>
                <label for="rimdepth">Rim Depth:</label>
                <input @bind="newDisc.RimDepth" />
            </div>
            <div>
                <label for="rimwidth">Rim Width:</label>
                <input @bind="newDisc.RimWidth" />
            </div>

            <button @onclick="CreateNewDisc">Submit</button>
            <button @onclick="HideCreateNewDiscForm">Cancel</button>
        </div>
    }

    <div>
        <button @onclick="UpdateSelectedDisc">Update Selected Disc</button>
    </div>
}

@code {
    private List<DiscModel> discsInBag = new List<DiscModel>();
    private List<DiscModel> allDiscs = new List<DiscModel>();
    private string newDiscName = "";
    private DiscModel selectedDisc;
    private string newDiscNameForNewDisc = "";
    private bool showAllDiscs = false;
    private bool isDiscClicked = false;
    private bool showCreateNewDiscForm = false;
    private DiscModel newDisc = new DiscModel();

    private void HideSelectedDisc()
    {
        // Reset the selectedDisc variable to hide the selected information
        selectedDisc = null;
        isDiscClicked = false;
    }

    private void ShowCreateNewDiscForm()
    {
        showCreateNewDiscForm = true;
    }

    private void HideCreateNewDiscForm()
    {
        showCreateNewDiscForm = false;
        // Clear the input fields when the form is hidden
        newDisc = new DiscModel();
    }

    private async Task AddExistingDiscToBag()
    {
        if (!string.IsNullOrWhiteSpace(newDiscName))
        {
            try
            {
                bool addedToBag = await discService.AddExistingDiscToBagAsync(newDiscName);

                if (addedToBag)
                {
                    await LoadDiscsInBag();
                    newDiscName = "";
                }
                else
                {
                    ShowErrorMessage("Failed to add disc to the bag. Please try again.");
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessage($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            ShowErrorMessage("Please enter a disc name.");
        }
    }

    private async Task LoadDiscsInBag()
    {
        discsInBag = await discService.GetDiscsInBagAsync();
    }

    private async Task DisplayAllDiscs()
    {
        allDiscs = await discService.GetDiscsAsync();
        showAllDiscs = true;
    }

    private void HideAllDiscs()
    {
        showAllDiscs = false;
    }

    private async Task DisplayDiscInfo(string discName)
    {
        selectedDisc = await discService.GetDiscByNameAsync(discName);
        isDiscClicked = true;
    }

    private async Task RemoveDiscFromBag(string discName)
    {
        if (await discService.RemoveDiscFromBagAsync(discName))
        {
            await LoadDiscsInBag();
        }
    }

    private async Task CreateNewDisc()
    {
        try
        {
            // Make an API request to create a new disc
            bool created = await discService.CreateDiscAsync(newDisc);

            if (created)
            {
                // Reload or update the UI as needed
                await LoadDiscsInBag();
                // Hide the form after successful creation
                HideCreateNewDiscForm();
            }
            else
            {
                ShowErrorMessage("Failed to create a new disc. Please try again.");
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"An error occurred: {ex.Message}");
        }
    }

    private async Task AddNewDiscToBag()
    {
        if (!string.IsNullOrEmpty(newDiscNameForNewDisc))
        {
            var newDisc = new DiscModel
                {
                    Name = newDiscNameForNewDisc,
                    // Set other properties accordingly
                };

            if (await discService.CreateDiscAsync(newDisc))
            {
                await LoadDiscsInBag();
                newDiscNameForNewDisc = "";
            }
        }
    }

    private async Task UpdateSelectedDisc()
    {
        if (selectedDisc != null)
        {
            var updatedDisc = new DiscModel
            {
                // Set properties of the updated disc accordingly
            };

            if (await discService.UpdateDiscAsync(selectedDisc.Name, updatedDisc))
            {
                await LoadDiscsInBag();
            }
        }
    }

    private async Task DeleteSelectedDisc()
    {
        if (selectedDisc != null)
        {
            if (await discService.DeleteDiscAsync(selectedDisc.Name))
            {
                await LoadDiscsInBag();
                selectedDisc = null;
            }
        }
    }

    private void ShowErrorMessage(string message)
    {
        Console.WriteLine($"Error: {message}");
    }
}






